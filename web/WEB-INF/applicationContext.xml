<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.2.xsd
http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
>
	<task:annotation-driven/>
	<!-- 扫描service包 -->
	<context:component-scan base-package="com.xwj.service"></context:component-scan>
	<!-- 扫描包，扫描注解，完成bean注入 -->
	<context:component-scan base-package="com.xwj.dao"></context:component-scan>
	<context:component-scan base-package="com.xwj.springjdbc"></context:component-scan>

	<!--spring自带定时任务-->
	<!--<context:component-scan base-package="com.xwj.task"/>-->
	<!-- 引入jdbc属性文件 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
      p:location="classpath:jdbc.properties"
      p:fileEncoding="utf-8"></bean> -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 定义dbcp数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close" p:driverClassName="${driverClassName}"
		  p:url="${url}" p:username="${username}"
		  p:password="${password}">
	</bean>

	<!-- jdbc模板，将数据源引入jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		  p:dataSource-ref="dataSource"></bean>

	<!-- 事务 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		  p:dataSource-ref="dataSource"></bean>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
					  expression="(execution(* com.xwj.service..*(..))) and
        (@annotation(org.springframework.transaction.annotation.Transactional))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!--spring-xstream相关-->
	<bean id="springOxm" class="com.xwj.Xstream.SpringOXMTest"
		  p:marshaller-ref="castorMarshaller"
		  p:unmarshaller-ref="castorMarshaller"/>
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"
		  p:mappingLocation="classpath:mapping.xml"/>
	<!--&lt;!&ndash;quart相关&ndash;&gt;-->
	<!--<context:component-scan base-package="com.xwj.quartz"/>-->
	<!--&lt;!&ndash; 排除周六和周日的日历。这是quartz已经实现的日历类,直接引用,如果有更复杂的操作可以自定义日历类&ndash;&gt;-->
	<!--<bean id="weeklyCalendar" class="org.quartz.impl.calendar.WeeklyCalendar" />-->

	<!--<bean id="dailyCalendarAM" class="org.quartz.impl.calendar.DailyCalendar">-->
		<!--<constructor-arg ref="weeklyCalendar" />-->
		<!--&lt;!&ndash;配置这个calendar周一到周五,9:25-11:31之间 执行&ndash;&gt;-->
		<!--<constructor-arg value="09:25" type="java.lang.String" />-->
		<!--<constructor-arg value="11:31" type="java.lang.String" />-->
		<!--&lt;!&ndash; include hours between start and end &ndash;&gt;-->
		<!--<property name="invertTimeRange" value="true" />-->
	<!--</bean>-->
	<!--<bean name="cronJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"-->
		  <!--p:jobClass="com.xwj.quartz.SpringCronJob">-->
		<!--&lt;!&ndash;上面配置简单作业的目标类,写类的路径&ndash;&gt;-->
		<!--<property name="jobDataAsMap">-->
			<!--<map>-->
				<!--<entry key="name" value="springCronJob"/>-->
			<!--</map>-->
		<!--</property>-->
		<!--&lt;!&ndash;配置耐久性，如果一个任务不是durable，那么当没有Trigger关联它的时候，它就会被自动删除&ndash;&gt;-->
		<!--<property name="durability" value="true"/>-->
	<!--</bean>-->
	<!--<bean name="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--&lt;!&ndash;目标类，需要是注解的名字&ndash;&gt;-->
		<!--<property name="targetObject" ref="simpleService"/>-->
		<!--&lt;!&ndash;目标方法名字&ndash;&gt;-->
		<!--<property name="targetMethod" value="doJob"/>-->
		<!--&lt;!&ndash;false表示等上一个任务执行完后再开启新的任务&ndash;&gt;-->
		<!--<property name="concurrent" value="false"/>-->
	<!--</bean>-->
	<!--<bean name="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="cronJobDetail"/>-->
		<!--<property name="cronExpression" value="*/5 * * * * ?"/>-->
		<!--<property name="calendarName" value="dailyCalendarAM"/>-->
	<!--</bean>-->
	<!--<bean name="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="simpleJobDetail"/>-->
		<!--&lt;!&ndash;延迟3秒&ndash;&gt;-->
		<!--<property name="startDelay" value="3000"/>-->
		<!--&lt;!&ndash;间隔1秒&ndash;&gt;-->
		<!--<property name="repeatInterval" value="1000"/>-->
	<!--</bean>-->
	<!--<bean name="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
		<!--<property name="triggers">-->
			<!--<list>-->
				<!--<ref bean="cronTrigger"/>-->
				<!--<ref bean="simpleTrigger"/>-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="calendars">-->
			<!--<map>-->
				<!--<entry key="dailyCalendarAM" value-ref="dailyCalendarAM"/>-->
			<!--</map>-->
		<!--</property>-->
	<!--</bean>-->

</beans>